import matplotlib.pyplot as plt
import pandas as pd
import numpy as np


# --- STEP 1: Prepare Data ---
dataset = dataset.dropna()
dataset = dataset.sort_values('MeasureTime')
dataset = dataset.tail(30)
dataset['MeasureTime'] = pd.to_datetime(dataset['MeasureTime'])

x_labels = dataset['SerialNumber']
y_values = dataset['Value']

# --- STEP 2: Basic Stats ---
mean = y_values.mean()
std = y_values.std()

# Spec limits (replace if dynamic)
USL = 31
LSL = 24

Cp = (USL - LSL) / (6 * std)
Cpk = min((USL - mean) / (3 * std), (mean - LSL) / (3 * std))

# --- STEP 3: Initialize OOC masks ---
rule1 = (y_values > mean + 3 * std) | (y_values < mean - 3 * std)
rule2 = np.zeros(len(y_values), dtype=bool)
rule3 = np.zeros(len(y_values), dtype=bool)
rule4 = np.zeros(len(y_values), dtype=bool)

# --- STEP 4: Rule 2 — 2 of 3 beyond ±2σ same side ---
for i in range(2, len(y_values)):
    group = y_values.iloc[i-2:i+1]
    above = (group > mean + 2*std).sum()
    below = (group < mean - 2*std).sum()
    if above >= 2 or below >= 2:
        rule2[i-2:i+1] = True

# --- STEP 5: Rule 3 — 4 of 5 beyond ±1σ same side ---
for i in range(4, len(y_values)):
    group = y_values.iloc[i-4:i+1]
    above = (group > mean + std).sum()
    below = (group < mean - std).sum()
    if above >= 4 or below >= 4:
        rule3[i-4:i+1] = True

# --- STEP 6: Rule 4 — 8 consecutive points on one side of mean ---
for i in range(7, len(y_values)):
    group = y_values.iloc[i-7:i+1]
    if (group > mean).all() or (group < mean).all():
        rule4[i-7:i+1] = True

# --- STEP 7: Plotting ---
plt.figure(figsize=(12, 6))

# Set chart background color based on out-of-control status
total_violations = rule1.sum() + rule2.sum() + rule3.sum() + rule4.sum()
if rule1.sum() > 0:
    chart_bg_color = 'mistyrose'  # Light red for Rule 1 (highest priority)
    text_bg_color = 'lightcoral'
elif rule2.sum() > 0:
    chart_bg_color = 'peachpuff'  # Light orange for Rule 2
    text_bg_color = 'orange'
elif rule3.sum() > 0:
    chart_bg_color = 'lavender'  # Light purple for Rule 3
    text_bg_color = 'plum'
elif rule4.sum() > 0:
    chart_bg_color = 'lightcyan'  # Light blue for Rule 4
    text_bg_color = 'lightblue'
else:
    chart_bg_color = 'lightgreen'  # Light green for in-control
    text_bg_color = 'lightgreen'

plt.gca().set_facecolor(chart_bg_color)

plt.plot(x_labels, y_values, marker='o', linestyle='-', color='black', label='Value')

# Highlight OOC points (plot in reverse order so Rule 1 appears on top)
plt.scatter(x_labels[rule4], y_values[rule4], color='blue', s=80, label='Rule 4 (8 same side)')
plt.scatter(x_labels[rule3], y_values[rule3], color='purple', s=80, label='Rule 3 (4 of 5 >±1σ)')
plt.scatter(x_labels[rule2], y_values[rule2], color='orange', s=80, label='Rule 2 (2 of 3 >±2σ)')
plt.scatter(x_labels[rule1], y_values[rule1], color='red', s=80, label='Rule 1 (>±3σ)')

# Control & spec lines
plt.axhline(mean, color='blue', linestyle='--', label='Mean')
for i, color in zip([1, 2, 3], ['green', 'orange', 'red']):
    plt.axhline(mean + i * std, color=color, linestyle='--', linewidth=1, label=f'+{i}σ')
    plt.axhline(mean - i * std, color=color, linestyle='--', linewidth=1, label=f'-{i}σ')

plt.axhline(USL, color='red', linestyle='-', linewidth=1.2, label='USL')
plt.axhline(LSL, color='blue', linestyle='-', linewidth=1.2, label='LSL')

# Calculate chart dimensions for consistent scaling
data_center = (y_values.max() + y_values.min()) / 2
data_range = y_values.max() - y_values.min()
fixed_range = max(data_range * 2, 50)  # Minimum range of 50 units

# Cp & Cpk box with color based on capability values
min_capability = min(Cp, Cpk)
if min_capability >= 1.33:
    cpk_bg_color = 'lightgreen'  # Good capability
elif min_capability >= 1.0:
    cpk_bg_color = 'yellow'      # Marginal capability
else:
    cpk_bg_color = 'red'         # Poor capability

# Position Cp/Cpk text relative to the chart area (bottom-left)
y_bottom = data_center - fixed_range/2
plt.text(0, y_bottom + fixed_range * 0.1,
         f"Cp = {Cp:.2f}\nCpk = {Cpk:.2f}",
         fontsize=17, bbox=dict(facecolor=cpk_bg_color, edgecolor='gray', boxstyle='round,pad=0.5'))

# Set fixed aspect ratio for consistent chart dimensions in Power BI
# This ensures the chart maintains the same physical size while scaling content proportionally
plt.gca().set_aspect('auto')  # Allow automatic aspect ratio adjustment
plt.xlim(-0.5, len(x_labels) - 0.5)  # Fixed X-axis range based on data points

# Set Y-axis range with consistent proportions relative to the data
data_center = (USL + LSL) / 2
# Use a fixed multiplier to ensure consistent chart proportions
ref_range = 100  # Minimum range of 50 units
plt.ylim(data_center - ref_range/2, data_center + ref_range/2)

# Final layout
plt.title("I-Chart with Out-of-Control Rules")
# plt.xlabel("Serial Number (Sorted by MeasureTime)")
# plt.ylabel("Value")
# plt.xticks(rotation=45)
plt.xticks([])  # Remove x-axis labels
plt.yticks([])  # Remove y-axis labels
plt.grid(True)
# plt.legend(loc='upper left', fontsize='small', bbox_to_anchor=(1.05, 1))
plt.tight_layout()
plt.show()
