import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# STEP 1: Prepare Data
dataset = dataset.dropna().sort_values('MeasureTime').tail(30)
dataset['MeasureTime'] = pd.to_datetime(dataset['MeasureTime'])

x_labels = dataset['SerialNumber']
y_values = dataset['Value']

# STEP 2: Basic Stats
mean = y_values.mean()
std = y_values.std()
USL = 31
LSL = 24

Cp = (USL - LSL) / (6 * std)
Cpk = min((USL - mean)/(3*std), (mean - LSL)/(3*std))

# STEP 3: Out-of-Control Rules
rule1 = (y_values > mean + 3*std) | (y_values < mean - 3*std)
rule2 = np.zeros(len(y_values), bool)
rule3 = np.zeros(len(y_values), bool)
rule4 = np.zeros(len(y_values), bool)

# Rule 2
for i in range(2, len(y_values)):
    group = y_values.iloc[i-2:i+1]
    if ((group > mean + 2*std).sum() >= 2 or (group < mean - 2*std).sum() >= 2):
        rule2[i-2:i+1] = True

# Rule 3
for i in range(4, len(y_values)):
    group = y_values.iloc[i-4:i+1]
    if ((group > mean + std).sum() >= 4 or (group < mean - std).sum() >= 4):
        rule3[i-4:i+1] = True

# Rule 4
for i in range(7, len(y_values)):
    group = y_values.iloc[i-7:i+1]
    if (group > mean).all() or (group < mean).all():
        rule4[i-7:i+1] = True

# STEP 4: Dynamic Plot Scaling
actual_range = USL - LSL
padding = max(actual_range * 0.5, 5)  # proportional padding (at least 5 units)
plt.figure(figsize=(12, 6))

# Background based on violation severity
if rule1.any(): chart_bg_color, cpk_bg_color = 'mistyrose', 'lightcoral'
elif rule2.any(): chart_bg_color, cpk_bg_color = 'peachpuff', 'orange'
elif rule3.any(): chart_bg_color, cpk_bg_color = 'lavender', 'plum'
elif rule4.any(): chart_bg_color, cpk_bg_color = 'lightcyan', 'lightblue'
else: chart_bg_color, cpk_bg_color = 'lightgreen', 'lightgreen'

plt.gca().set_facecolor(chart_bg_color)

# Plot values
plt.plot(x_labels, y_values, marker='o', linestyle='-', color='black')

# Highlight OOC
plt.scatter(x_labels[rule4], y_values[rule4], color='blue', s=80)
plt.scatter(x_labels[rule3], y_values[rule3], color='purple', s=80)
plt.scatter(x_labels[rule2], y_values[rule2], color='orange', s=80)
plt.scatter(x_labels[rule1], y_values[rule1], color='red', s=80)

# Mean & Sigma lines
plt.axhline(mean, color='blue', linestyle='--')
for i, color in zip([1, 2, 3], ['green', 'orange', 'red']):
    plt.axhline(mean + i*std, color=color, linestyle='--', linewidth=1)
    plt.axhline(mean - i*std, color=color, linestyle='--', linewidth=1)

# USL & LSL lines
plt.axhline(USL, color='red', linestyle='-', linewidth=1.2)
plt.axhline(LSL, color='blue', linestyle='-', linewidth=1.2)

# Set proportional Y-limits based on actual data range
plt.ylim(LSL - padding, USL + padding)
plt.xlim(-0.5, len(x_labels) - 0.5)

# Cp/Cpk Box
plt.text(0, LSL - padding/2, f"Cp = {Cp:.2f}\nCpk = {Cpk:.2f}",
         fontsize=14, bbox=dict(facecolor=cpk_bg_color, edgecolor='gray', boxstyle='round'))

# Clean visual style for Power BI
plt.xticks([])
plt.yticks([])
plt.title("I-Chart with Out-of-Control Rules")
plt.grid(True)
plt.tight_layout(pad=2.0)
plt.show()
